# Projektwurzel (AKSEP\projects\AKSEP)
.
├─ .editorconfig
├─ .env.example
├─ .eslintrc.cjs
├─ .gitignore                                # u.a. .nuxt/, .output/, node_modules/
├─ .nvmrc
├─ .prettierignore
├─ .prettierrc
├─ .vscode/
│  └─ settings.json
├─ AGENTS.md                                 # muss noch rennoviert werden
├─ DEVELOPER.md
├─ i18n.config.ts                            # (optional) zentrale i18n-Optionen
├─ package.json
├─ package-lock.json                         # oder pnpm-lock.yaml / yarn.lock
├─ README.md
├─ tsconfig.json
├─ nuxt.config.ts                            # Nuxt 3 + @nuxt/content + @nuxtjs/i18n Konfiguration
│
├─ .github/
│  └─ workflows/
│     ├─ ci.yml                              # Lint + Typecheck + (optional) Linkcheck der Content-Seiten
│     └─ deploy.yml                          # (falls benötigt) Preview/Prod Deploy
|
├─ docs/                                     # Projekt-Dokumentation (zur Entzerrung des Root)
│  ├─ local_tree.txt                         # generiert aus der local_tree.ps1/.mjs, beschreibt die *momentane* Dateistruktur
│  ├─ migration.md
│  ├─ Verzeichnisbaum.txt
│  └─ yaml.md
│
├─ server/
│  └─ routes/
│     └─ sitemap.xml.ts                      # generiert Sitemap aus @nuxt/content
|
├─ public/
│  ├─ favicon.ico
│  ├─ robots.txt
│  ├─ og-image.png
│  ├─ .well-known/
│  │  ├─ security.txt
│  │  └─ humans.txt
│  ├─ images/
│  │  └─ content/                            # Bilder, die in Markdown verlinkt werden (z.B. /images/content/…)
│  ├─ uploads/                               # Ziel für Decap-Uploads (media_folder/public_folder)
│  ├─ admin/
│  │  ├─ index.html
│  │  └─ config.yml
│  └─ _redirects
│
├─ content/                                  # Git-basiertes CMS (Markdown/MDC/YAML) – @nuxt/content
│  ├─ _globals.yml                           # optionale globale Metadaten (Copyright, orgName, etc.)
│  │
│  ├─ start/
│  │  ├─ _dir.yml                            # defaults für die Startseite (Layout, Pfad, Meta)
│  │  └─ _index.mdc
│  │
│  ├─ begriffe/
│  │  ├─ _dir.yml                            # z.B. { layout: default, path: { en: "glossary" } }
│  │  ├─ _index.mdc                          # Glossar-Landing (A–Z, Suche)
│  │  └─ _terms/                             # einzelne Begriffseinträge
│  │     ├─ _dir.yml                         # defaults: { autolink: true }
│  │     ├─ ag.mdc
│  │     ├─ cancel-culture.mdc
│  │     ├─ demokratie.mdc
│  │     ├─ extremismus.mdc
│  │     ├─ faschismus.mdc
│  │     ├─ identitaetspolitik.mdc
│  │     ├─ liberalismus.mdc
│  │     ├─ meinungsfreiheit.mdc
│  │     ├─ nationalsozialismus.mdc
│  │     ├─ neoliberalismus.mdc
│  │     ├─ paedophil-paedokriminell.mdc
│  │     ├─ populismus.mdc
│  │     ├─ radikal.mdc
│  │     ├─ rechts-links.mdc
│  │     ├─ toleranz.mdc
│  │     └─ wokeness.mdc
│  │
│  ├─ programm/
│  │  ├─ _dir.yml                            # defaults: { layout: "program", path: { de:"programm", en:"program" } }
│  │  ├─ _index.mdc                          # Programm-Startseite
│  │  ├─ CHANGELOG.mdc                       # manuelles Änderungsprotokoll
│  │  │
│  │  ├─ ag-regierung/
│  │  │  ├─ _dir.yml                         # { ag_id: 1, path:{en:"government"} , ... }
│  │  │  ├─ _index.mdc                       # KURZ (AG)
│  │  │  ├─ regierungsform/
│  │  │  │  ├─ _dir.yml                      # { thema_id: 1, highlighted: true, ... }
│  │  │  │  ├─ _index.mdc                    # MITTEL (Thema)
│  │  │  │  ├─ 01.mdc                        # LANG Kapitel 01  (## …, ::variant{de/en, simple})
│  │  │  │  ├─ 02.mdc                        # LANG Kapitel 02
│  │  │  │  ├─ …
│  │  │  │  ├─ Q.mdc                         # Q&A
│  │  │  │  └─ Z.mdc                         # Schluss
│  │  │  ├─ wahlsystem/
│  │  │  │  ├─ _dir.yml
│  │  │  │  ├─ _index.mdc
│  │  │  │  ├─ 01.mdc
│  │  │  │  └─ …
│  │  │  └─ verguetungssystem-amtsinhaber/
│  │  │     ├─ _dir.yml
│  │  │     ├─ _index.mdc
│  │  │     ├─ 01.mdc
│  │  │     └─ …
│  │  │
│  │  ├─ ag-innere-sicherheit/               # Platzhalter (AG 2)
│  │  │  ├─ _dir.yml
│  │  │  ├─ _index.mdc
│  │  │  └─ …/                               # themen/* (analog)
│  │  │
│  │  ├─ ag-umweltschutz/
│  │  │  ├─ _dir.yml                         # { ag_id: 3, path:{en:"environmental-protection"} }
│  │  │  ├─ _index.mdc
│  │  │  ├─ feuerwerk-events/
│  │  │  │  ├─ _dir.yml                      # { thema_id: 1, highlighted: false }
│  │  │  │  ├─ _index.mdc
│  │  │  │  ├─ 01.mdc
│  │  │  │  ├─ 02.mdc
│  │  │  │  ├─ 03.mdc
│  │  │  │  ├─ 04.mdc
│  │  │  │  ├─ 05.mdc
│  │  │  │  ├─ 06.mdc
│  │  │  │  ├─ 07.mdc
│  │  │  │  ├─ 08.mdc
│  │  │  │  ├─ 09.mdc
│  │  │  │  ├─ 10.mdc
│  │  │  │  ├─ 11.mdc
│  │  │  │  ├─ 12.mdc
│  │  │  │  ├─ 13.mdc
│  │  │  │  └─ …
│  │  │  └─ extensivwiesen/
│  │  │     ├─ _dir.yml                      # { thema_id: 2 }
│  │  │     ├─ _index.mdc
│  │  │     └─ …
│  │  │
│  │  ├─ ag-klimaschutz/
│  │  │  ├─ _dir.yml                         # { ag_id: 4, path:{en:"climate-protection"} }
│  │  │  ├─ _index.mdc
│  │  │  └─ project-drawdown/
│  │  │     ├─ _dir.yml                      # { thema_id: 1 }
│  │  │     ├─ _index.mdc
│  │  │     ├─ 01.mdc
│  │  │     ├─ 02.mdc
│  │  │     ├─ 03.mdc
│  │  │     ├─ 04.mdc
│  │  │     ├─ 05.mdc
│  │  │     ├─ 06.mdc
│  │  │     ├─ 07.mdc
│  │  │     ├─ 08.mdc
│  │  │     ├─ 09.mdc
│  │  │     ├─ 10.mdc
│  │  │     ├─ 11.mdc
│  │  │     ├─ 12.mdc
│  │  │     ├─ 13.mdc
│  │  │     └─ …
│  │  │
│  │  └─ …/                                  # ags/* (analog)
│  │
│  ├─ finanzen-transparenz/   ┐
│  ├─ kontakt/                │
│  ├─ mitglied-werden/        │   # Primärseiten (alle gleich aufgebaut)
│  ├─ partner-projekte/       │   # jede enthält:
│  ├─ praeambel/              │   #   _dir.yml
│  ├─ presse/                 │   #   _index.mdc   (DE/EN + einfache Sprache per ::variant)
│  ├─ projekte/               │
│  ├─ satzung/                │
│  ├─ termine/                │
│  ├─ ueber-uns/              │
│  ├─ unterstuetzen/          │
│  ├─ datenschutz/            │   # statt .html → konsistent als Markdown
│  └─ impressum/              ┘
│
├─ modules/                                  # lokale Nuxt-Module (Build-Hooks, Content-Pipeline)
│  ├─ content-aliases.ts                     # EN-Slug-Aliases (pfadlokalisierte URLs mit Fallback)
│  ├─ content-edited-git.ts                  # füllt `edited` aus Git-Commit-Timestamps
│  ├─ glossary-autolink.ts                   # Autolink erstes Glossar-Vorkommen (Hover)
│  └─ content-ensure.ts                      # Validierung/Injection (ag_id/thema_id/kapitel_id)
│
├─ scripts/                                  # Hilfsskripte (Migration/Checks/CI)
│  ├─ check-missing-variants.mjs             # prüft DE/EN & simple, sonst Warnungen
│  ├─ generate-en-aliases.mjs                # generiert slug_en-Aliases aus _dir.yml
│  ├─ build-chapters-toc.mjs                 # erzeugt Themen-Inhaltsverzeichnisse
│  ├─ local_tree.ps1                         # von Root hierher verschoben
│  └─ local_tree.mjs                         # Node-Alternative für Nicht-Windows
│           
└─ src/                                      # *** technischer App-Code (sauber gebündelt) ***
   ├─ app.vue                                # globaler Rahmen (Header/Footer via Komponenten)
   ├─ app.config.ts                          # (optional) App-weite Konfiguration
   │
   ├─ assets/                                # gebundelte Assets (CSS, Fonts, Bilder)
   │  ├─ css/
   │  │  └─ main.css
   │  └─ images/
   │     └─ placeholders/
   │
   ├─ components/                            # Auto-Import durch Nuxt
   │  ├─ AppHeader.vue
   │  ├─ AppFooter.vue
   │  ├─ Variant.vue                         # Wrap für ::variant{lang, simple}
   │  ├─ VariantToolbar.vue                  # Sprach-/„Leichte Sprache“-Schalter
   │  ├─ Chapter.vue                         # kapselt Kapitel-Heading + Anker (#<kapitel_id>)
   │  └─ TermHint.vue                        # Glossar-Tooltip/Popover
   │
   ├─ composables/
   │  ├─ useI18nPath.ts                      # baut lokalisierte Pfade (inkl. Fallback auf DE-Slug)
   │  ├─ useVariants.ts                      # Kapselt {lang, simple}-Logik für ::variant
   │  └─ useGlossaryIndex.ts                 # A–Z Index, Suche, erste-Erwähnung-Map
   ├─ types/
   │  ├─ domain.ts                           # Typen: AgId, ThemaId, KapitelId, Front-Matter-Schemata
   │  └─ content.d.ts                        # Module augmentation für @nuxt/content (wenn gewünscht)
   │
   ├─ layouts/
   │  ├─ default.vue                         # Standardlayout (<NuxtPage/>)
   │  └─ program.vue                         # Layout für /programm/*
   │
   ├─ pages/                                 # Routen (i18n benötigt eine pages-Struktur)
   │  ├─ index.vue                           # Redirect → /start
   │  ├─ programm/
   │  │  ├─ kurz/
   │  │  │  └─ [ag].vue                      # /programm/kurz/<AG> → rendert AG/_index.mdc
   │  │  ├─ mittel/
   │  │  │  └─ [ag]/
   │  │  │     └─ [thema].vue                # /programm/mittel/<AG>/<Thema> → Thema/_index.mdc
   │  │  └─ lang/
   │  │        └─ [ag]/
   │  │           └─ [thema].vue             # /programm/lang/<AG>/<Thema> (+ #<kapitel_id>)
   │  └─ error.vue                           # optional
   │
   ├─ plugins/
   │  └─ variant-filter.client.ts            # rendert nur passenden ::variant-Block (lang/simple)
   │
   ├─ stores/
   │  └─ prefs.ts                            # Pinia: { simple: boolean } (+ persistentes Locale)
   │
   ├─ locales/                               # UI-Strings (Toolbar/Labels), NICHT Content
   │  ├─ de.json
   │  └─ en.json
   │
   └─ middleware/                            # (optional) i18n/guards/etc.
